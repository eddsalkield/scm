.\" Manpage for dotfiles-manager.
.\" Contact samuel@swalladge.id.au to correct errors or typos.
.TH dotfiles-manager 1 "September 29, 2017" "0.0.1"

.SH NAME
dotfiles-manager \- experimental dotfiles manager in rust

.SH SYNOPSIS
.B dotfiles-manager
[\fB-fhynVv\fR] 
[\fB-d\fR] \fIDIR\fR
[\fB-t\fR] \fITARGET_DIR\fR
[\fB-B\fR] \fIHOSTNAME\fR
\fBinstall|remove|add\fR
[subcommand options] 

.SH DESCRIPTION
dotfiles-manager is a program to manage your dotfiles.
It can work with a structured repository of files and hooks (see \fBREPOSITORY STRUCTURE\fR), sorted into
packages. It is able to install or remove packages, and can add an existing
file to a package (eg. if you want to track a new dotfile).

See \fBUSAGE EXAMPLES\fR for more information on how to use it.

.SH OPTIONS
.SS General options
.TP
.BR \-f ", " \-\-force
Run in force mode - will overwrite any existing files when installing.
.TP
.BR \-h ", " \-\-help
Display help and usage. Gives help and usage for a subcommand if supplied after the subcommand.
.TP
.BR \-y ", " \-\-yes
Assume yes to all confirmation prompts. Useful for a non-interactive mode, such as in automated scripts.
.TP
.BR \-n ", " \-\-no
Run in test mode. When this is active, no files will be modified and no hooks
will run. Use this to get a listing of what actions would be performed.
.TP
.BR \-V ", " \-\-version
Display the software version and exit>
.TP
.BR \-v ", " \-\-verbose
Turn on verbose mode. Currently this does not display any extra information.
.TP
.BR \-d ", " "\-\-dir \fIDIR\fR"
Set the directory of the dotfiles repository. Default is the current working directory.
.TP
.BR \-t ", " "\-\-target \fIDIR\fR"
Set the directory to install to or remove from. Defaults to the HOME directory.
.TP
.BR \-B ", " "\-\-hostname \fINAME\fR"
Override the computer's hostname. Affects which host-specific files/hooks are used.
.SS 'add' subcommand options
.TP
.BR \-p ", " \-\-host
Add the file in host-specific mode (instead of to the global package files directory).
.TP
.BR \-p ", " "\-\-package \fIPACKAGE\fR"
Set the package to add the existing file to.

.SH REPOSITORY STRUCTURE
The dotfiles repository must follow a certain structure so that files, hooks, and host specific things are correctly found for each package.
An example repository structure is below:

repository/
.br
├── vim/
.br
│   ├── files/
.br
│   │   ├── .vim/
.br
│   │   │   └── filetype.vim
.br
│   │   └── .vimrc
.br
│   ├── hooks/
.br
│   │   ├── post-down/
.br
│   │   │   └── post-down-final.sh
.br
│   │   ├── post-up/
.br
│   │   │   └── install_plugins.sh
.br
│   │   ├── pre-down/
.br
│   │   │   └── prepare_for_teardown.sh
.br
│   │   └── pre-up/
.br
│   │       └── setup.sh
.br
│   └── hosts/
.br
│       ├── desktop1/
.br
│       │   ├── files/
.br
│       │   │   ├── .config/
.br
│       │   │   │   └── i3/
.br
│       │   │   │       └── config
.br
│       │   │   └── .vimrc
.br
│       │   └── hooks/
.br
│       │       ├── post-down/
.br
│       │       │   └── remove_vim_package.sh
.br
│       │       ├── post-up/
.br
│       │       │   ├── 00-install_plugins.sh
.br
│       │       │   └── 99-custom_install_after.sh
.br
│       │       └── pre-up/
.br
│       │           └── setup.sh
.br
│       └── test_host2/
.br
│           └── hooks/
.br
│               └── pre-up/
.br
│                   └── setup.sh
.br
└── zsh
.br
    └── files
.br
        └── .zshrc

Basically, every top level directory is a package. Each package directory can
contain 3 directories: files, hooks, and hosts.
All files under the files directory are files to install and will be symlinked
into the target directory, creating directories if required.

The hooks directory can contain any of the following directories: pre-up,
post-up, pre-down, and post-down. These directories must contain executable
files to be run on events. They are run in lexicographical order, it could be
useful to prefix names with a number, like '00' or '99' to set the order.

The hosts directory can contain any number of directories, where the directory
name corresponds to the hostname of the machine the containing configuration
should apply to. Each host directory should contain up to 2 directories: files,
and hooks. These directories perform the same functions and their package level
counterparts discussed above. The files and hooks will only be used when the
computer's hostname matches the host directory name. Files and hooks with the
same path and name as in the package level files and hooks will override the
package level files and hooks.


.SH USAGE EXAMPLES

.SS Installing packages

To install a subset of your dotfiles (a package), use the install subcommand.
For example (assuming the repository is ~/.dotfiles-repo/ and computer hostname is desktop1):

\fBdotfiles-manager -d ~/.dotfiles-repo install vim\fR

This will perform the following:

1. gather pre-up hooks from ~/.dotfiles-repo/vim/hooks/pre-up/ and ~/.dotfiles-repo/vim/hosts/desktop1/hooks/pre-up/ (if existing)
.br
2. any global package hooks with the same name as host-specific hooks are discarded (allowing host-specific ones to override global)
.br
3. hooks are executed in lexicographical order
.br
4. program exits if hook fails to execute or returns a non-zero code
.br
4. gather all files (including within subdirs) from ~/.dotfiles-repo/vim/files/ and ~/.dotfiles-repo/vim/hosts/desktop/files/
.br
5. any files from the host-specific directory with the same path as package level files will be used instead of those
.br
6. directories are created in the target directory as required
.br
7. files are symlinked out
.br
8. if error during symlinking, program quits without running post-up hooks
.br
9. otherwise, gather post-up hooks from ~/.dotfiles-repo/vim/hooks/post-up/ and ~/.dotfiles-repo/vim/hosts/desktop1/hooks/post-up/ (if existing)
.br
10. any global package hooks with the same name as host-specific hooks are discarded (allowing host-specific ones to override global)
.br
11. hooks are executed in lexicographical order

.SS Removing packages

Removing packages is almost exactly the reverse of installing. It will remove
all correct current symlinks in the target dir to the package dir files, and
execute pre-down and post-down hooks.
It will not attempt to remove files that aren't correct symlinks to the package files. (so it's pretty safe to use)
Example:

\fBdotfiles-manager -d ~/.dotfiles-repo remove vim\fR

.SS Adding files

Adding a file is a quick way to track a new dotfile. For example, to add your vimrc to the repository:

\fBdotfiles-manager -d ~/.dotfiles-repo add ~/.vimrc --package vim\fR

Alternatively, if this is a dotfile that is specific to this host, you can run:

\fBdotfiles-manager -d ~/.dotfiles-repo add ~/.vimrc --package vim --host\fR

This does the following:

1. move the file to the appropriate place in the source repository
.br
2. symlink out the file to its original location

.SS Notes

None of the operations will attempt to overwrite or delete existings files,
unless the \fB--force\fR flag is given.

Multiple packages can be installed or removed at once (processed one after the
other). Simply pass more package names after the subcommand:

\fBdotfiles-manager -d ~/.dotfiles-repo install vim zsh\fR



.SH BUGS
No known bugs.
If any issues are found, please open an issue at https://github.com/swalladge/dotfiles-manager/issues,
or contact the author.

.SH AUTHOR
Samuel Walladge (samuel@swalladge.id.au)
